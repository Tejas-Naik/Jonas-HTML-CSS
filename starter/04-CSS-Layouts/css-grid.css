/* 
  Parent container - grid container 
  Child Elements   - grid items
  Row Axis         - =====> axis
  Columns Axis     - ^ axis(top to bottom)
  Grid lines       - all the lines that separetes elements
                     you can count them as 1, 2, 3(row), 1,2,3(column)
  Gutter/Gap       - the gap between the grid items
  Grid track       - grid tracks are the ways that the grid is following (row/column)
  fr               - fraction to diveide available space between the items equally
  auto(grid-template) - if you set the auto to grid-item then it will take exactly the space that it needs

  ON CHILD ELEMENTS
  grid-column - {start/end} to place the item in which column
  grid-row    - {start/end} to place the item in which row
  
*/

.el--1 {
  background-color: blueviolet;
}
.el--2 {
  background-color: orangered;
}
.el--3 {
  background-color: green;
  height: 150px;
}
.el--4 {
  background-color: goldenrod;
}
.el--5 {
  background-color: palevioletred;
}
.el--6 {
  background-color: steelblue;
}
.el--7 {
  background-color: yellow;
}
.el--8 {
  background-color: crimson;
}

.container--1 {
  /* STARTER */
  font-family: sans-serif;
  background-color: #ddd;
  font-size: 32px;
  margin: 40px;

  /* CSS GRID */
  display: grid;
  /* grid-template-columns: 200px 200px 100px 100px; */
  /* grid-template-columns: 1fr 1fr 1fr 1fr(auto) */
  /* grid-template-rows: 300px 200px; */
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: 1fr 1fr;
  /* height: 500px; */

  /* gap: 30px;  */
  column-gap: 30px;
  row-gap: 60px;
  /* Temp */
  display: none;
}
/* Placing items in Grid */
/* Placing element 8(learn) to position 2(and) */
/* grid-column: 2/3; = start from column2 and end in column3 */
.el--8 {
  grid-column: 2/3;
  grid-row: 1/2;
}
/* placing item2 at position4 */
.el--2 {
  /* grid-column: 1/3;  if you specfy 1/3 then the item is going to stretch upto the 3rd column */
  /* grid-column: 1/ span 4 ;so it will take the width of 4 spans(items) */
  grid-column: 1/-1;
  grid-row: 2/3;
}
/* We can also do that for rows */
.el--6 {
  /* grid-row: 3/5;*/
}

.container--2 {
  /* STARTER */
  font-family: sans-serif;
  background-color: black;
  font-size: 40px;
  margin: 40px;

  width: 700px;
  height: 600px;

  /* CSS GRID */
  display: grid;
  grid-template-columns: 125px 200px 125px;
  grid-template-rows: 250px 100px;
  gap: 50px;
  /* Aligning tracks inside container: 
  distributing empty spaces */
  /* Horizontally =====~> */
  justify-content: center;
  /* justify-content: space-between; */
  /* Vertically */
  align-content: center; /*Instead of align-items we use align-content*/

  /* Aligning items inside cells: 
  moving items around inside cells | cell = the boxes inside grid*/

  /* align-item: stretch default */
  align-items: center;
  justify-items: center;
}
/* Aligning individual items in cells */
.el--3 {
  align-self: end;
}
