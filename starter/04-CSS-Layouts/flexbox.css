.el--1 {
  background-color: blueviolet;
}
.el--2 {
  background-color: orangered;
}
.el--3 {
  background-color: green;
  height: 150px;
}
.el--4 {
  background-color: goldenrod;
}
.el--5 {
  background-color: palevioletred;
}
.el--6 {
  background-color: steelblue;
}
.el--7 {
  background-color: yellow;
}
.el--8 {
  background-color: crimson;
}

.container {
  /* STARTER */
  font-family: sans-serif;
  background-color: #ddd;
  font-size: 40px;
  margin: 40px;
  /* width: 50vw; */
  /* FLEXBOX  to get started use the disply property and set it to flex
    1. at first the flex items will take:
    -  as much width needed for the elements
    -  the height of the highest element if specified or as much height needed to fit the content
    
    2. to align items to the center of its parent element we use 
    align-items: center;
    3. to align the items to the center of its parent element horizontally we use
    justify-content: center;

    4. to add the gap between the elements we can use the margin but sometimes it wont work as expected so there is a flex property that can
    help us that is `gap`
  */
  display: flex;
  align-items: center; /* this is for vertical alignment -------> flex-start, flex-end, stretch*/
  justify-content: center; /* this si for horizontal alignment^ space-around, space-between*/
  /* gap: 10px; */
}

/* ALIGNING FLEX-ITEMS 
1. to align one flex-item other than all flex items we use the align-self property on the flex-item
2. to order the items like you want we use -1(to get it to first), and 1 (to get to the last) by default all items are at position 0
  DEFAULTS
  -flex-grow: 0;
  -flex-shrink: 1;
  flex-basis: auto;
3. flex-basis = width but more logically
4. flex-shrink will shrink the width of the items to fit in its parent element lets say 
  the parent element is 100px and there are 5 flex-items of 22px that is 110px so we are going 10px
  out of parent element so the flex-shrink will shrink the elements width to fit the content and make them 20px(not all because there might be an element that take 22px exactly to fit the content so we cant shrink that but we can the other if it is like 18px to fit the content)

5. flex-grow will grow the width of the flex-items if the parent element is larger than the width of all flex-items lets say we have a parent element of 200px and 5 
  elements of 30px so it will be 150px so we have more 50px empty then the flex-grow will grow the width of the elements like 30px(+10px)=40px to fit into the parent element
*/
.el{
  /* flex-basis: 200px; */
  /* flex-grow: 1 ; */
  /* flex-shrink: 1; */
  /* So you dont wanna type all the 3 elements above so css got u you can use: 
      flex: flex-grow flex-shrink flex-basis;
  */
  flex: 0 1 200px;
}
/* .el--1 {
  align-self: flex-start;
  /*order: 2; 2 beccause we already set the value of el--6 as 1 so we need big number than that to set it to the last one*/

/*
.el--5 {
  align-self: stretch;
  order: 1;
}
.el--6{
  order: -1;
} */